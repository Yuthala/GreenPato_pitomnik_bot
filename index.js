const { Telegraf, Markup } = require('telegraf')
const { message } = require('telegraf/filters')
require('dotenv').config()
const text = require('./const')

const bot = new Telegraf(process.env.BOT_TOKEN)
bot.start((ctx) => ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}! –ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`,getMainMenu()))
bot.help((ctx) => ctx.reply(text.commands))
// bot.on(message('sticker'), (ctx) => ctx.reply('üëç'))
//bot.hears('hi', (ctx) => ctx.reply('Hey there')) // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º?


// –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ–Ω—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /ask
    bot.command('ask', async (ctx) => {
        try {
       await ctx.replyWithHTML('<b>–í–æ–ø—Ä–æ—Å—ã</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ê—Ä–µ–Ω–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å', 'btn_1')],
                [Markup.button.callback('–î–µ–ø–æ–∑–∏—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è', 'btn_2')],
                [Markup.button.callback('–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã(–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã)', 'btn_3')],
                [Markup.button.callback('–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', 'btn_4')],
                [Markup.button.callback('–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç', 'btn_5')],
                [Markup.button.callback('–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –Ω–µ –≤—ã—à–µ–ª –∏–∑ —Å–ª–æ—Ç–∞', 'btn_6')],
                [Markup.button.callback('–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä —É–≤–µ–∑–µ–Ω/—É—Ç–µ—Ä—è–Ω/—É–∫—Ä–∞–¥–µ–Ω', 'btn_7')]
            ]
        ))
    
        } catch(e) {
            console.error(e)
        }
        
    })

// –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ–Ω—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /start 
    function getMainMenu() {
        return Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ê—Ä–µ–Ω–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å', 'btn_1')],
                [Markup.button.callback('–î–µ–ø–æ–∑–∏—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è', 'btn_2')],
                [Markup.button.callback('–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã(–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã)', 'btn_3')],
                [Markup.button.callback('–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', 'btn_4')],
                [Markup.button.callback('–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç', 'btn_5')],
                [ Markup.button.callback('–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –Ω–µ –≤—ã—à–µ–ª –∏–∑ —Å–ª–æ—Ç–∞', 'btn_6')],
                [Markup.button.callback('–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä —É–≤–µ–∑–µ–Ω/—É—Ç–µ—Ä—è–Ω/—É–∫—Ä–∞–¥–µ–Ω', 'btn_7')]
            ]
        )
    }


function addActionBot(name, src, text) {
    bot.action(name, async (ctx) => {
        try {
            await ctx.answerCbQuery()
            if (src !== false) {
                await ctx.replyWithPhoto({
                    source: src
                })
            }
          await ctx.replyWithHTML(text, {
            disable_web_page_preview: true
          }) 
        } catch (e) {
            console.error(e)
        }
    })
}
addActionBot('btn_1',false, text.btn_1Text)
addActionBot('btn_2',false, text.btn_2Text)
addActionBot('btn_3',false, text.btn_3Text)

bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))